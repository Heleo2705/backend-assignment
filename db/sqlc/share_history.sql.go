// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: share_history.sql

package db

import (
	"context"
)

const getSharedNotes = `-- name: GetSharedNotes :many
SELECT id, owner_id, shared_id, shared_note_id, shared_at FROM "ShareHistory"
WHERE owner_id=$1
`

func (q *Queries) GetSharedNotes(ctx context.Context, ownerID int64) ([]ShareHistory, error) {
	rows, err := q.db.QueryContext(ctx, getSharedNotes, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShareHistory
	for rows.Next() {
		var i ShareHistory
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.SharedID,
			&i.SharedNoteID,
			&i.SharedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const shareNote = `-- name: ShareNote :one
INSERT INTO "ShareHistory"(owner_id,shared_id,shared_note_id)
VALUES ($1,$2,$3)
RETURNING id, owner_id, shared_id, shared_note_id, shared_at
`

type ShareNoteParams struct {
	OwnerID      int64 `json:"owner_id"`
	SharedID     int64 `json:"shared_id"`
	SharedNoteID int64 `json:"shared_note_id"`
}

func (q *Queries) ShareNote(ctx context.Context, arg ShareNoteParams) (ShareHistory, error) {
	row := q.db.QueryRowContext(ctx, shareNote, arg.OwnerID, arg.SharedID, arg.SharedNoteID)
	var i ShareHistory
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.SharedID,
		&i.SharedNoteID,
		&i.SharedAt,
	)
	return i, err
}
